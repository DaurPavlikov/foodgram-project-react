name: Foodgram Workflow

on: [push]

jobs:

  tests:
    name: Deployment of Python environment and run PEP8 tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Get Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Upgrade pip and install flake8 packages and requirements
        run: |
          python -m pip install --upgrade pip 
          pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
          cd backend/
          pip install -r requirements.txt
      - name: Run flake8 tests
        run: |
          python -m flake8 backend

  build_and_push_backend_to_docker_hub:
    name: Uploading backend image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Get Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./backend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest

  build_and_push_frontend_to_docker_hub:
    name: Uploading frontend image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - tests
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3
      - name: Get Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push frontend image to DockerHub
        uses: docker/build-push-action@v2
        with:
          context: ./frontend
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    name: Deployment and set environment parameters on remote server
    runs-on: ubuntu-latest
    needs:
      - tests
      - build_and_push_backend_to_docker_hub
      - build_and_push_frontend_to_docker_hub
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Establishing SSH connection to remote server and create .env file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker-compose stop
            sudo docker-compose rm backend
            sudo docker-compose rm frontend
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

            rm -f .env
            touch .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            
            sudo docker-compose up -d --build

            sudo docker-compose exec backend python manage.py makemigrations
            sudo docker-compose exec backend python manage.py migrate
            sudo docker-compose exec backend python manage.py collectstatic --no-input
            sudo docker-compose exec backend python manage.py import_ingredients_from_csv

  send_message:
    name: Sending Telegram message
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
